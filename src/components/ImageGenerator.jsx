import axios from "axios"
import { useEffect, useState } from "react"
import { Potrace } from "potrace"
import { apiKey } from "../config/openAi"
import CodeContainer from "./CodeContainer"

const ImageGenerator = () => {
    
    const [prompt, setPrompt] = useState();
    const [imageUrl, setImageUrl] = useState();
    const [croppedImage, setCroppedImage] = useState()
    const [svgCreated, setSvgCreated] = useState(false)
    const [svgImage, setSvgImage] = useState()
    const [codeString, setCodeString] = useState()
    const container = document.querySelector('.svg')
    let svg

    const trace = new Potrace()

    useEffect(() => {
        if (imageUrl) {
            trace.loadImage(imageUrl[0].url, () => {
                svg = trace.getSVG()
                setCodeString(svg)
                container.innerHTML = svg
                setSvgCreated(true)
            })
        }        
    }, [imageUrl])

    useEffect(() => {
        if (svgCreated){

        }
    }, [svgCreated])

    const generateImage = async (e) => {
        e.preventDefault()
        const data = {
            model: 'image-alpha-001',
            prompt: prompt,
            size: '256x256',
            response_format: 'url',
        }
        const headers = {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
        };
        const response = await axios.post('https://api.openai.com/v1/images/generations', data, { headers: headers });
        setImageUrl(response.data.data)
    }

    const returnActualPrompt = (inputPrompt) => {
        setPrompt(`a single icon of ${inputPrompt} in black on white background. Minimalistic, flat, and geometric vector art.`)
    }

    return (
        <div>
            <form onSubmit={generateImage}>
                <label>
                    Prompt:
                    <input type="text" onChange={e => returnActualPrompt(e.target.value)} />
                </label>
                <button type="submit">Generate Image</button>
            </form>
            <div className="autogenerated">
                {imageUrl && (
                    <>
                    <span>Autogenerated PNG</span>
                    <img src={imageUrl[0].url} />
                    </>
                )}
            </div>
            <div className="svg"></div>
            <div className="code-container">
            {svgCreated && (
                <CodeContainer code={codeString} />
            )}
            </div>
        </div>
    )
}

export default ImageGenerator